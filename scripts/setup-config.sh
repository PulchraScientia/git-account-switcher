#!/bin/bash

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# 스크립트 시작 부분에 추가
is_colab() {
    if [ -f "/content/sample_data/README.md" ]; then
        return 0  # Colab 환경
    else
        return 1  # 일반 환경
    fi
}

# Colab 환경 설정
if is_colab; then
    echo "Colab 환경이 감지되었습니다. 추가 설정을 적용합니다..."
    
    # SSH 디렉토리 권한 설정
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
    
    # 필요한 패키지 설치
    apt-get update > /dev/null 2>&1
    apt-get install -y openssh-client > /dev/null 2>&1
    
    # git 설정
    git config --global core.sshCommand "ssh -o StrictHostKeyChecking=no"
fi

# SSH 설정 디렉토리 및 파일 확인/생성
setup_ssh_directory() {
    echo -e "\n${YELLOW}SSH 디렉토리 및 설정 파일 준비중...${NC}"
    
    # SSH 디렉토리 생성
    if [ ! -d "$HOME/.ssh" ]; then
        mkdir -p "$HOME/.ssh"
        chmod 700 "$HOME/.ssh"
    fi

    # config 파일 백업 (기존 파일이 있는 경우)
    if [ -f "$HOME/.ssh/config" ]; then
        cp "$HOME/.ssh/config" "$HOME/.ssh/config.backup.$(date +%Y%m%d_%H%M%S)"
        echo "기존 SSH config 파일이 백업되었습니다."
    fi

    # config 파일이 없으면 생성
    if [ ! -f "$HOME/.ssh/config" ]; then
        touch "$HOME/.ssh/config"
        chmod 600 "$HOME/.ssh/config"
    fi

    # known_hosts 파일 생성
    if [ ! -f "$HOME/.ssh/known_hosts" ]; then
        touch "$HOME/.ssh/known_hosts"
        chmod 600 "$HOME/.ssh/known_hosts"
    fi

    # Enterprise GitHub 호스트 키 미리 추가
    ssh-keyscan -t ecdsa github.ecodesamsung.com >> "$HOME/.ssh/known_hosts"
    # 일반 GitHub 호스트 키 미리 추가
    ssh-keyscan -t ecdsa github.com >> "$HOME/.ssh/known_hosts"
}

# SSH config 템플릿 생성
create_ssh_config() {
    local type=$1
    local account=$2
    local key_file=$3
    
    # config 파일 시작 부분에 주석 추가
    if [ ! -s "$HOME/.ssh/config" ]; then
        echo "# SSH Configuration File" > "$HOME/.ssh/config"
        echo "# Generated by Git Account Switcher" >> "$HOME/.ssh/config"
        echo "# Last updated: $(date)" >> "$HOME/.ssh/config"
        echo "" >> "$HOME/.ssh/config"
    fi

    if [ "$type" == "Enterprise" ]; then
        # Enterprise GitHub 설정
        echo "# Samsung Enterprise GitHub" >> "$HOME/.ssh/config"
        echo "Host github.ecodesamsung.com" >> "$HOME/.ssh/config"
        echo "    HostName github.ecodesamsung.com" >> "$HOME/.ssh/config"
        echo "    User git" >> "$HOME/.ssh/config"
        echo "    IdentityFile $key_file" >> "$HOME/.ssh/config"
        echo "" >> "$HOME/.ssh/config"
    else
        # 일반 GitHub 설정
        echo "# GitHub.com ($account)" >> "$HOME/.ssh/config"
        echo "Host github.com-$account" >> "$HOME/.ssh/config"
        echo "    HostName github.com" >> "$HOME/.ssh/config"
        echo "    User git" >> "$HOME/.ssh/config"
        echo "    IdentityFile $key_file" >> "$HOME/.ssh/config"
        echo "" >> "$HOME/.ssh/config"
    fi
}

setup_github_account() {
    local type=$1
    echo -e "\n${YELLOW}=== $type GitHub 계정 설정 ===${NC}"
    
    read -p "계정명을 입력하세요: " account
    read -p "이메일을 입력하세요: " email
    
    # SSH 키 파일 경로 설정
    local key_file="$HOME/.ssh/id_ed25519_${account}"
    
    # SSH 키 생성
    if [ ! -f "$key_file" ]; then
        echo -e "\n${YELLOW}SSH 키 생성 중...${NC}"
        ssh-keygen -t ed25519 -C "$email" -f "$key_file"
    fi
    
    # SSH config 설정 추가
    create_ssh_config "$type" "$account" "$key_file"
    
    # SSH 에이전트에 키 추가
    echo -e "\n${YELLOW}SSH 에이전트에 키 추가 중...${NC}"
    eval "$(ssh-agent -s)"
    ssh-add "$key_file"
    
    # 공개키 출력 및 안내
    echo -e "\n${GREEN}SSH 공개키가 생성되었습니다.${NC}"
    echo -e "아래 내용을 GitHub의 SSH 키 설정에 등록해주세요:"
    echo -e "${YELLOW}"
    cat "${key_file}.pub"
    echo -e "${NC}"
    
    if [ "$type" == "Enterprise" ]; then
        echo -e "\n${GREEN}Enterprise GitHub SSH 키 등록 방법:${NC}"
        echo "1. https://github.ecodesamsung.com/settings/keys 접속"
    else
        echo -e "\n${GREEN}GitHub SSH 키 등록 방법:${NC}"
        echo "1. https://github.com/settings/keys 접속"
    fi
    echo "2. [New SSH key] 클릭"
    echo "3. 위의 키 내용을 복사하여 등록"
    
    # 설정 테스트
    if [ "$type" == "Enterprise" ]; then
        echo -e "\n${YELLOW}Enterprise GitHub 연결 테스트 중...${NC}"
        ssh -T git@github.ecodesamsung.com
    else
        echo -e "\n${YELLOW}GitHub.com 연결 테스트 중...${NC}"
        ssh -T "git@github.com-$account"
    fi

    if [ ! -f "$key_file" ]; then
        echo -e "\n${YELLOW}SSH 키 생성 중...${NC}"
        # -N "" 옵션으로 패스프레이즈 없이 생성
        ssh-keygen -t ed25519 -C "$email" -f "$key_file" -N ""
    fi

    # 연결 테스트 시 옵션 추가
    if [ "$type" == "Enterprise" ]; then
        echo -e "\n${YELLOW}Enterprise GitHub 연결 테스트 중...${NC}"
        # StrictHostKeyChecking=no 옵션 추가
        ssh -o StrictHostKeyChecking=no -T git@github.ecodesamsung.com
    else
        echo -e "\n${YELLOW}GitHub.com 연결 테스트 중...${NC}"
        ssh -o StrictHostKeyChecking=no -T "git@github.com-$account"
    fi
}

# 메인 실행 부분
echo -e "${GREEN}=== Git Account Switcher SSH 설정 ===${NC}"

# SSH 디렉토리 및 기본 설정 준비
setup_ssh_directory

# 일반 GitHub 계정 설정
read -p "일반 GitHub 계정을 설정하시겠습니까? (y/n) " -n 1 -r
echo
[[ $REPLY =~ ^[Yy]$ ]] && setup_github_account "Public"

# Enterprise GitHub 계정 설정
read -p "Enterprise GitHub 계정을 설정하시겠습니까? (y/n) " -n 1 -r
echo
[[ $REPLY =~ ^[Yy]$ ]] && setup_github_account "Enterprise"

echo -e "\n${GREEN}SSH 설정이 완료되었습니다!${NC}"
echo -e "설정 파일 위치: $HOME/.ssh/config"